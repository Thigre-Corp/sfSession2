{# templates/formation/index.html.twig #}
{% extends 'base.html.twig' %}
{% block title %}Formations{% endblock %}
 
{% block body %}
<h2>Formations proposées</h2>
 
{% if auth %}
<button
    class="btn btn-success js-open-modal"
    data-url="{{ path('formation_new') }}"
    data-title="Ajouter une formation">
    Ajouter une formation
</button>
{% endif %}
 
<table class="table table-striped table-bordered mt-3">
  <thead class="table-dark">
    <tr>
    <th>Nom</th>
    <th>Descriptif</th>
          {% if auth %}<th colspan="2">Administration</th>{% endif %}
    </tr>
  </thead>
  <tbody>
    {% for row in formations %}
    <tr>
      <td><a href="{{ path('show_formation', {'id': row.id}) }}">{{ row }}</a></td>
      <td>{{ row.descriptif }}</td>
            {% if auth %}
      <td>
        <button
                    class="btn btn-warning js-open-modal"
                    data-url="{{ path('formation_edit', {'id': row.id}) }}"
                    data-title="Éditer une formation">
                    Éditer
        </button>
      </td>
      <td><a href="{{ path('delete_formation', {'id': row.id}) }}" class="btn btn-danger">Supprimer</a></td>
            {% endif %}
      </tr>
      {% endfor %}
  </tbody>
</table>
 

{# Modale "vide" qu'on remplit dynamiquement #}
<div class="modal fade" id="addEditModal" tabindex="-1" aria-hidden="true">
<div class="modal-dialog"><div class="modal-content">
<div class="modal-header">
<h5 class="modal-title">Chargement…</h5>
<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
</div>
<div class="modal-body"><div class="text-muted">Veuillez patienter…</div></div>
</div></div>
</div>
 
<script>
document.addEventListener('click', async (e) => {
  const btn = e.target.closest('.js-open-modal');
  if (!btn) return;
 
  const url = btn.dataset.url;
  const modalEl = document.getElementById('addEditModal');
  const titleEl = modalEl.querySelector('.modal-title');
  const bodyEl  = modalEl.querySelector('.modal-body');
 
  // Reset visuel
  titleEl.textContent = btn.dataset.title || 'Formulaire';
  bodyEl.innerHTML = '<div class="text-muted">Chargement…</div>';
 
  // Charge le fragment de formulaire depuis la bonne route (new ou edit)
  const resp = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
  bodyEl.innerHTML = await resp.text();
 
  // Ouvre la modale
  const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
  modal.show();
 
  // (Optionnel) Soumission en AJAX pour éviter le reload
  const form = bodyEl.querySelector('form');
  if (form) {
    form.addEventListener('submit', async (ev) => {
      ev.preventDefault();
      const submitBtn = form.querySelector('button[type="submit"]');
      submitBtn?.setAttribute('disabled', 'disabled');
      try {
        const post = await fetch(form.action, {
          method: form.method || 'POST',
          headers: { 'X-Requested-With': 'XMLHttpRequest' },
          body: new FormData(form)
        });
 
        if (post.ok) {
          // Ici, fais simple : on recharge la page pour voir la liste à jour
          window.location.reload();
        } else {
          // En cas d'erreur de validation, on réinjecte le HTML retourné
          bodyEl.innerHTML = await post.text();
        }
      } catch(err) {
        console.error(err);
      } finally {
        submitBtn?.removeAttribute('disabled');
      }
    }, { once: true });
  }
});
</script>
{% endblock %}